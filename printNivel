import java.util.Deque;
import java.util.LinkedList;

public class Nivel {
 
	
class Node{
	int value;
	Node right;
	Node left;
	Node parent;
	
	public Node(int v) {
		this.value = v;
	}

}

class BST{
	private Node root;

	public String printNivel(int nivel){
		if(isEmpty()) return "";

		Deque <Node> fila = new LinkedList<>();
		fila.addLast(this.root);
		int nivelatual = 0;

		while(!fila.isEmpty()){
			qntNivel = fila.size();
			StringBuilder saida = new StrinBuilder;

			for(int i = 0; i < qntNivel; i++){
				Node node = fila.removeFirst();
				if(niveatual == nivel) return saida.append(node.value).append(" ")
				if(node.left != null) fila.addLast(node.left);
				if(node.right != null) fila.addLast(node.right);
}
		if(nivelatual = nivel) return saida.toString.trim()
		niveatual++;
} 
return "";
}
}
}
	
	public String printNivel(int nivel) { 
		if(this.root == null) return ""; // se a árvore tiver vazia retorna string vazia
		
		Deque<Node> fila = new LinkedList<>(); //cria uma fila
		fila.addLast(this.root); //adiciona a raiz na fila
		int nivelAtual = 0;
		
		while(!fila.isEmpty()) { //enquanto a fila não tiver vazia
			int qtdNoNivel = fila.size(); //guarda quantos nós estão neste nível e na fila
			StringBuilder saida = new StringBuilder(); // usada para armazenar os valores desse nível
			
			for (int i = 0; i < qtdNoNivel; i++) { //para cada nó do nível atual, remove da fila e processa
				Node node = fila.removeFirst();
				if(nivelAtual == nivel) saida.append(node.value).append(" "); //se o nível atual é o que queremos adiciona o value a saída
				if(node.left != null) fila.addLast(node.left); // se o nó tem filhos adiciona eles na fila para o proximo nível
				if(node.right != null) fila.addLast(node.right);
			}
			if (nivelAtual == nivel) return saida.toString().trim(); //se foi o nível desejado retorna os valores como string
			nivelAtual++; //se não, incrementa o nivel autal e continua a busca
}
		return "";
	}
}
}

// diz o nível que o elemento tá

public int nivel(int valor) {
    Node atual = this.root;
    int nivel = 0;

    while (atual != null) {
        if (atual.value == valor) {
            return nivel; // Encontrou o valor, retorna o nível
        }

        if (valor < atual.value) {
            atual = atual.left;
        } else {
            atual = atual.right;
        }

        nivel++;
    }
 return -1; // Valor não está na árvore
}

public int nivel(int v){
	if(isEmpty()) return -1;

	Deque<Node> fila = new LinkedList<>();
	fila.addLast(this.root);
	int nivelAtual = 0;

	while(!fila.isEmpty()){
		Node node = fila.removeFisrt;
		int qntNivel  = fila.size();
		for(int i = 0; i < qntNivel; i++{
			if(node.value == v) return nivelAtual;
			if(node.left != null) return fila.addLast(node.left);
			if(node.right != null) return fila.addLast(node.right);
}
nivelAtual++;
}
}


public String printNivel(int nivel){
	if(this.root == null) return "";

	Deque<Node> fila = new LinkedList<>();
	fila.addLast(this.root);
	int nivelAtual = 0;

	while(!fila.isEmpty()){
		int qntNivel = fila.size();
		StringBuilder saida = new StringBuilder();

		for(int i = 0; i < qntNivel; i++){
			Node node = fila.removeFirst();
			if(nivelAtual == nivel) saida.append(node.value),appen("");
			if(node.left != null) fila.addLast(node.left);
			if(node.right != null) fila.addLast(node.rigth);
}
		if(nivelAtual == nivel) return saida.toString().trim();
}
return "";
    return -1; // Valor não está na árvore
}

public int nivel(int x){
	if(isEmpty()) return -1;

	Deque<Node> fila = new LinkedList<>();
	fila.addLast(this.root);
	int nivelAtual = 0;

	while(!fila.is.Empty()){
		int qntNivel = fila.size();

		for(int i = 0; i < qntNivel; i++){
			Node aux = fila.removeFirst();
			if(aux.value == x) return nivelAtual;
			if(aux.left != null) fila.addLast(aux.left);
			if(aux.right != null) fila.addLast(aux.right
}
		nivelAtual++;
}
return -1;
}
);
