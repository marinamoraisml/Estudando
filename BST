package bst;

import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;

public class BST {

    private Node root; //referência pra raíz
    private int size; //quantidade de elementos na árvore
    
    public boolean isEmpty() {  //verificar se a árvore tá vazia
        return this.root == null;
    }
    
    /**
     * Implementação iterativa da adição de um elemento em uma árvore binária de pequisa.
     * @param element o valor a ser adicionado na árvore.
     */
    public void add(int element) {
        this.size += 1;  //incrementa o size quando adiciona um novo nó
        if (isEmpty()) 
            this.root = new Node(element); // se a árvore tá vazia o novo nó vira raiz
        else {
            
            Node aux = this.root; // inicia aux com a raiz para buscar a posição onde vai adicionar
            
            while (aux != null) {
                
                if (element < aux.value) {  //verifica se o elemento vai para esquerda
                    if (aux.left == null) { // verifica se a posição da esquerda ta livre
                        Node newNode = new Node(element); //cria um novo nó com o valor do elemento para ser inserido
                        aux.left = newNode; // conecta o novo nó como filho á esquerda do nó atual
                        newNode.parent = aux;  //define o pai do novo nó como o nó atual
                        return;
                    }
                    
                    aux = aux.left; //atualiza o auxiliar para continuar buscando na subárvore da esquerda

                } else {
                    if (aux.right == null) { //verifica se a direita tá livre
                        Node newNode = new Node(element);
                        aux.right = newNode;
                        newNode.parent = aux;
                        return;
                    }
                    
                    aux = aux.right;
                }
            }
        }
        
    }
    
    
    /**
     * Retorna o nó que contém o valor máximo da árvore. Implementação recursiva.
     * @return o nó contendo o valor máximo da árvore ou null se a árvore estiver vazia.
     */
    public Node min() {
        if (isEmpty()) return null;
        return min(this.root);
    }
    
    /**
     * Retorna o nó que contém o valor máximo da árvore cuja raiz é passada como parâmetro. Implementação recursiva.
     * @param a raiz da árvore.
     * @return o nó contendo o valor máximo da árvore ou null se a árvore estiver vazia.
     */
    private Node min(Node node) {
        if (node.left == null) return node;
        else return min(node.left);
    }

    /**
     * Retorna o nó que contém o valor máximo da árvore. Implementação iterativa.
     * @return o nó contendo o valor máximo da árvore ou null se a árvore estiver vazia.
     */
    public Node max() {
        if (isEmpty()) return null;
        
        Node node = this.root;
        while(node.right != null)
            node = node.right;
        
        return node;
    }
    
    /**
     * Retorna o nó que contém o valor máximo da árvore cuja raiz é passada como parâmetro. Implementação recursiva.
     * @param raiz da árvore.
     * @return o nó contendo o valor máximo da árvore ou null se a árvore estiver vazia.
     */
    
    private Node max(Node node) {
        if (node.right == null) return node;
        else return max(node.right);
    }
    
    /**
     * Retorna o nó cujo valor é predecessor do valor passado como parâmetro. 
     * @param valor O nó para o qual deseja-se identificar o predecessor.
     * @return O nó contendo o predecessor do valor passado como parâmetro. O método retorna null caso não haja 
     * predecessor.
     */
    public Node predecessor(Node node) {  //é o maior menor número 
        if (node == null) return null;
        
        if (node.left != null)  // tem subárvore a esquerda
            return max(node.left); //o maior valor da subárvore
        else {
            Node aux = node.parent; //o nó não tem subárvore a esquerda en~tao vai subindo pra ver se tem, começando pelo pai do nó atual
            
            while (aux != null && aux.value > node.value) // vai subir enquanto o auxiliar for maior que o valor
                aux = aux.parent;
            
            return aux;
        }
    }
    
    /**
     * Retorna o nó cujo valor é sucessor do valor passado como parâmetro. 
     * @param valor O valor para o qual deseja-se identificar o sucessor.
     * @return O nó contendo o sucessor do valor passado como parâmetro. O método retorna null
     * caso não haja sucessor.
     */
    public Node sucessor(Node node) {  // menor valor maior do que ele
        if (node == null) return null;
        
        if (node.right != null)  // tem subárvore a direita
            return min(node.right);  // o sucessor é o menor valor da subárvore a direita// o min vai percorrer os nós pela esquerda até encontrar o menor
        else {                // não tem subárvore a direita
            Node aux = node.parent; // sobe a árvore para achar um valor maior
            
            while (aux != null && aux.value < node.value)  //subir na árvore enquanto os valores forem menor que o valor atual
                aux = aux.parent;
            
            return aux;
        }
    }
    
    
    /**
     * Implementação recursiva do método de adição.
     * @param element elemento a ser adicionado.
     */
    public void recursiveAdd(int element) {
        
        if (isEmpty())
            this.root = new Node(element); // se for vazia adiciona na raiz
        else {
            Node aux = this.root; //auxiliar começa na raiz
            recursiveAdd(aux, element);
        }
        this.size += 1; // aumenta a quantidade de nós na árvore
        
    }

    /**
     * Método para auxiliar na implementação recursiva do método de adição.
     * @param node a raíz da árvore.
     * @param element elemento a ser adicionado.
     */
    private void recursiveAdd(Node node, int element) { //recebe o nó atual e o elemento que quer inserir
        
        if (element < node.value) { // verifica se o elemento a ser inserido é menor que o valor do nó atual
            if (node.left == null) { //verifica se a esquerda ta vazia
                Node newNode = new Node(element); // cria o novo nó com o elemento a ser inserido
                node.left = newNode; //liga ele como filho esquerdo
                newNode.parent = node; //define o parente
                return;
            }
            recursiveAdd(node.left, element); // se a esquerda não tava vazia, chama o método de novo com o filho esquerdo como novo ponto de partida
        } else {
            if (node.right == null) {
                Node newNode = new Node(element);
                node.right = newNode;
                newNode.parent = node;
                return;
            }
            recursiveAdd(node.right, element);
        }
        
    }
    
    /**
     * Remove the node with the value.
     * @param value
     */
    public void remove(int value) {  
        Node toRemove = search(value);  //procura o nó pra remover
        if (toRemove != null) {  //se econtrar chama o outro método remove
            remove(toRemove);
            this.size -= 1; //decrementa o tamanho da árvore
        }
        
    }
    
    /**
     * Remove node. Private method to control recursion.
     * @param toRemove
     */
    private void remove(Node toRemove) {
        
        // First case: node is leaf. // nó é uma folha
        if (toRemove.isLeaf()) { // se for folha é so desconectar do pai
            if (toRemove == this.root)
                this.root = null; // se for vazia a árvore inteira vira vazia

            else {
                if (toRemove.value < toRemove.parent.value) //verifica se tá a esquerda ou na direita do pai
                    toRemove.parent.left = null;
                else
                    toRemove.parent.right = null;
            }
        
        // Second case: node has only left child or only right child // só tem um filho
        } else if (toRemove.hasOnlyLeftChild()) { 
            if (toRemove == this.root)  {
                this.root = toRemove.left; //troca a raiz pela subarvore da esquerda
                this.root.parent = null; // o novo nó não vai ter mais parent
            } else {
                toRemove.left.parent = toRemove.parent; // conecta o filho ao avô
                if (toRemove.value < toRemove.parent.value) 
                    toRemove.parent.left = toRemove.left; //atualiza o ponteiro de left
                else
                    toRemove.parent.right = toRemove.left;
            }
        } else if (toRemove.hasOnlyRightChild()) {
            if (toRemove == this.root) {
                this.root = toRemove.right;
                this.root.parent = null;
            } else {
                toRemove.right.parent = toRemove.parent;
                if (toRemove.value < toRemove.parent.value)
                    toRemove.parent.left = toRemove.right;
                else
                    toRemove.parent.right = toRemove.right;
            }
            
        // Third case: node has two children // nó tem dois filhos
        } else {
            Node sucessor = sucessor(toRemove); //encontrar o sucessor
            toRemove.value = sucessor.value; //copiar o valor do sucessor para o nó a ser removido
            remove(sucessor); //remover recursivamente o sucessor
        }
            
    }

    /**
     * Busca o nó cujo valor é igual ao passado como parâmetro. Essa é a implementação 
     * iterativa clássica da busca binária em uma árvore binária de pesquisa.
     * @param element O elemento a ser procurado.
     * @return O nó contendo o elemento procurado. O método retorna null caso
     * o elemento não esteja presente na árvore.
     */
    public Node search(int element) {
        
        Node aux = this.root; // começa pela raiz
        
        while (aux != null) {   
            if (aux.value == element) return aux;
            if (element < aux.value) aux = aux.left;
            if (element > aux.value) aux = aux.right;
        }
        
        return null;

    }
    
    /**
     * Busca o nó cujo valor é igual ao passado como parâmetro. Essa é a implementação 
     * recursiva clássica da busca binária em uma árvore binária de pesquisa.
     * @param element O elemento a ser procurado.
     * @return O nó contendo o elemento procurado. O método retorna null caso
     * o elemento não esteja presente na árvore.
     */
    public Node recursiveSearch(int element) {
        return recursiveSearch(this.root, element); //passa a araiz como incio
    }
    
    /**
     * Busca o nó cujo valor é igual ao passado como parâmetro na sub-árvore cuja raiz é node. Trata-se de um método auxiliar
     * para a busca recursiva.
     * @param node a raiz da árvore.
     * @param element O elemento a ser procurado.
     * @return O nó contendo o elemento procurado. O método retorna null caso
     * o elemento não esteja presente na árvore.
     */
    private Node recursiveSearch(Node node, int element) { //nó atual e o valor procurado
        if (node == null) return null; //chegamos a uma folha e não encontramos
        if (element == node.value) return node; // retorna o nó
        if (element < node.value) return recursiveSearch(node.left, element); //se é menor continua na subárvore da esquerda
        else return recursiveSearch(node.right, element);
    }
    
    /**
     * Retorna a altura da árvore.
     */
    public int height() {
        return height(this.root); //começa passando a raiz como argumento
    }
    
    /**
     * Método para auxiliar a recursão. Retorna
     * a altura da árvore cuja raiz é passada como parâmetro.
     */
    private int height(Node node) {
        if(node == null) return -1; // folha ou subárvore vazia
        else return 1 + Math.max(height(node.left), height(node.right)); //calcula o valor da sub árvore da esquerda depois o da direita pega o maior dos dois e soma 1 pq sobe um nível na árvore
    }

    /**
     * Percorre a árvore em pré-ordem.
     */
    public void preOrder() { //nó,esquerda,direita
        preOrder(this.root); //começa passando a raiz
    }

    private void preOrder(Node node) {
        if (node != null) { //verifica se o nó atual existe
            System.out.println(node.value); // visita o nó atual e imprime o valor dele
            preOrder(node.left); //chamada recursiva para visitar a subarvore da esquerda
            preOrder(node.right); //direita
        }
    }

    /**
     * Percorre a árvore em-ordem.
     */
    public void inOrder() { //esquerda, nó,direita -> ordem crescente
        inOrder(this.root); //inicia a recursão a partir da raiz
    }

    private void inOrder(Node node) {
        if (node != null) { //verifica se o nó atual existe
            inOrder(node.left); //visita recursivamente a subárvore da esquerda
            System.out.println(node.value); //depois imprime o valor do nó atual
            inOrder(node.right); //depois visita a subárvore da direita
        }
        
    }

    /**
     * Percorre a árvore em pos-ordem.
     */
    public void posOrder() { //esquerda,direita,nó
        posOrder(this.root);  
    }

    private void posOrder(Node node) {
        if (node != null) {
            posOrder(node.left); //percorre recursivamente a subárvore da esquerda
            posOrder(node.right); //da direita
            System.out.println(node.value); //por último o nó
        }
        
    }
    
    /**
     * Percorre a árvore em largura. 
     * @return Uma lista com a os elementos percorridos em largura.
     */
    public ArrayList<Integer> bfs() { //percorrer a árovore nível por nível
        ArrayList<Integer> list = new ArrayList<Integer>(); //lista onde vai armazenar os valores visitados
        Deque<Node> queue = new LinkedList<Node>(); //essa é a fila usada para controlar quais nós ainda precisam ser visitados
        
        if (!isEmpty()) {
            queue.addLast(this.root);  //coloca a raiz como primeiro elemento para ser visitado
            while (!queue.isEmpty()) {  //enquanto houver nós na fila
                Node current = queue.removeFirst(); //pega o primeiro nó da fila e o visita
                
                list.add(current.value); //adiciona na lista
                
                if(current.left != null) 
                    queue.addLast(current.left); //se tem filho a esquerda adiciona a fila e depois visita
                if(current.right != null) 
                    queue.addLast(current.right);    //se tiver filho a direita adiciona
            }
        }
        return list;
    }

    /**
     * @return o tamanho da árvore.
     */
    public int size() {
        return this.size;
    }
    
}


class Node {
    
    int value; // valor do nó
    Node left; 
    Node right;
    Node parent;
    
    Node(int v) {
        this.value = v;
    }

    public boolean hasOnlyLeftChild() { //só tem filho da esquerda
        return (this.left != null && this.right == null);
    }
    
    public boolean hasOnlyRightChild() {
        return (this.left == null && this.right != null);
    }

    public boolean isLeaf() {
        return this.left == null && this.right == null;
    }
    
}
